# 🤖 Telegram Product Scraper

نظام سكرابينج منتجات من قنوات Telegram وإرسالها للـ Backend

## 📋 المتطلبات

1. **Telegram API Credentials**
   - اذهب إلى: https://my.telegram.org/apps
   - سجل دخول برقم تليجرامك
   - أنشئ تطبيق جديد واحصل على `api_id` و `api_hash`

2. **Python 3.11+** (للتطوير المحلي)
3. **Docker & Docker Compose** (للـ Production)
4. **Coolify v4** account

## 🚀 التشغيل المحلي

### 1. الإعداد الأولي

```bash
# Clone the repository
git clone <your-repo>
cd telegram-scraper

# إنشاء virtual environment
python -m venv venv
source venv/bin/activate  # Linux/Mac
# أو
venv\Scripts\activate  # Windows

# تثبيت المكتبات
pip install -r requirements.txt

# إنشاء ملف .env
cp .env.example .env
# عدل الملف وضع بياناتك
```

### 2. تعديل ملف .env

```env
TELEGRAM_API_ID=123456
TELEGRAM_API_HASH=your_hash_here
TELEGRAM_PHONE=+201234567890
BACKEND_URL=http://localhost:8000/api/products
```

### 3. التشغيل

```bash
# سكرابينج الرسائل القديمة (آخر 100 رسالة)
python scraper.py

# المراقبة المباشرة للرسائل الجديدة
# عدل في scraper.py: mode='live'
python scraper.py
```

**ملاحظة مهمة**: عند أول تشغيل، ستطلب منك Telegram كود التحقق المرسل لرقمك.

## 🐳 Deployment على Coolify v4

### 1. إعداد المشروع في Coolify

```bash
# رفع الكود على Git repository (GitHub/GitLab)
git init
git add .
git commit -m "Initial commit"
git remote add origin <your-git-repo>
git push -u origin main
```

### 2. إنشاء مشروع جديد في Coolify

1. اذهب إلى Coolify Dashboard
2. اضغط **+ New Resource**
3. اختر **Public Repository**
4. الصق رابط الـ Git repository
5. اختر **Dockerfile** كـ Build Pack

### 3. إعداد Environment Variables

في Coolify، اذهب إلى **Environment Variables** وأضف:

```
TELEGRAM_API_ID=123456
TELEGRAM_API_HASH=your_hash_here
TELEGRAM_PHONE=+201234567890
BACKEND_URL=https://your-backend.com/api/products
```

### 4. إعداد Volumes (لحفظ البيانات)

في Coolify:
- **Volumes** → Add Volume
  - `/app/downloaded_images` → لحفظ الصور
  - `/app/scraper_session.session` → لحفظ الـ session

### 5. Deploy

اضغط **Deploy** وانتظر حتى يكتمل البناء والتشغيل.

## 🔐 مشكلة الـ Session في Production

### الحل الأمثل: تسجيل الدخول محلياً أولاً

```bash
# 1. شغل السكرابر محلياً مرة واحدة
python scraper.py

# 2. سيتم إنشاء ملف scraper_session.session
# 3. ارفع الملف هذا إلى Coolify عبر Volume أو Secret

# في Coolify:
# Resources → Secrets → Add Secret
# Name: telegram_session
# Content: (محتوى ملف scraper_session.session)
```

### البديل: استخدام Bot Token

```python
# إذا كنت تريد تجنب مشكلة الـ Session تماماً
# أنشئ Bot عبر @BotFather وأضف البوت للقنوات
# ثم استخدم Bot Token بدلاً من User Account
```

## 📊 هيكل البيانات المرسلة للـ Backend

```json
{
  "channel_id": 123456789,
  "message_id": 12345,
  "timestamp": "2025-10-24T10:30:00",
  "description": "منتج رائع... السعر 299 جنيه بدلا من 399",
  "image_urls": [
    "https://your-cdn.com/image1.jpg",
    "https://your-cdn.com/image2.jpg"
  ],
  "prices": {
    "current_price": 299,
    "old_price": 399
  }
}
```

## 🔄 Workflow الكامل

```
Telegram Channels
       ↓
  Scraper (Telethon)
       ↓
  Extract Data (Prices, Images, Description)
       ↓
  Download Images Locally
       ↓
  Upload Images to Backend/CDN
       ↓
  Send Product Data to Backend API
       ↓
  Backend saves to Database
```

## 🛠️ Troubleshooting

### خطأ: "Could not connect to Telegram"
- تأكد من الـ API credentials صحيحة
- تأكد من الإنترنت متصل
- جرب VPN إذا كان Telegram محجوب

### خطأ: "Session file not found"
- سجل دخول محلياً أولاً
- ارفع ملف الـ session إلى Coolify

### الصور لا تحمل
- تأكد من المساحة متوفرة
- تأكد من الـ Volume محدد صح في Coolify

## 📝 تحسينات مستقبلية

- [ ] إضافة Queue system (Redis + Celery)
- [ ] OCR لاستخراج الأسعار من الصور
- [ ] AI لتصنيف المنتجات تلقائياً
- [ ] Dashboard لمتابعة السكرابينج
- [ ] Retry mechanism للرسائل الفاشلة
- [ ] Webhooks للإشعارات

## 📞 الدعم

إذا واجهت أي مشكلة، افتح Issue في الـ repository.
